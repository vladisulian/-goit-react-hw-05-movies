{"version":3,"file":"static/js/566.e774abfb.chunk.js","mappings":"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","sources":["Pages/API/API.jsx","Pages/Loading/Loading.jsx","Pages/Movies/AdditionalInformation/Cast/RenderCast/RenderCast.jsx","Pages/Movies/AdditionalInformation/Cast/RenderCast/RenderCastList.jsx","Pages/Movies/AdditionalInformation/Cast/Cast.jsx","Pages/Movies/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '635ac74a11f3f55a21a984cd556f5915';\nconst URL = 'https://api.themoviedb.org/3/';\nexport async function FetchTrending() {\n  const response = await axios.get(`\n   ${URL}trending/all/day?api_key=${API_KEY}`);\n  return response.data.results;\n}\nexport async function FetchMovieDetails(id) {\n  const response = await axios.get(\n    `${URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log(response.data, 'from fetchMovieDetails');\n  return response.data;\n}\nexport async function FetchByName(name) {\n  const response = await axios.get(\n    `${URL}search/movie?api_key=${API_KEY}&language=en-US&query=${name}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\nexport async function FetchCast(id) {\n  const response = await axios.get(\n    `${URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  //   console.log('response.data', response.data);\n  return response.data;\n}\nexport async function FetchReviews(id) {\n  const response = await axios.get(\n    `${URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  // console.log(response.data.results);\n  return response.data.results;\n}\n","export const Loading = () => {\n  return (\n    <>\n      <h4>Please, wait a bit. Loading...</h4>\n    </>\n  );\n};\n","import { getPosterUrl } from 'Pages/Movies/MovieDetails/MovieDetails';\nexport const RenderCast = ({ cast }) => {\n  console.log('cast from RenderCast.jsx', cast);\n  if (cast.length > 0) {\n    return cast.map(actor => {\n      if (actor.profile_path)\n        return (\n          <li key={actor.id} className=\"actor\">\n            <img src={getPosterUrl(actor.profile_path)} alt=\"actorPhoto\" />\n            <p className=\"actor-name\">{actor.name}</p>\n            <p className=\"actor-character\">{actor.character}</p>\n          </li>\n        );\n    });\n  } else {\n    return <h2>Sorry, there is no information about Cast.</h2>;\n  }\n};\n","export const RenderCastList = ({ children }) => {\n  return <ul className=\"cast-list\">{children}</ul>;\n};\n","import './Cast.css';\nimport { useEffect, useState, Suspense } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FetchCast } from 'Pages/API/API';\nimport { RenderCast } from './RenderCast/RenderCast';\nimport { RenderCastList } from './RenderCast/RenderCastList';\nimport { Loading } from 'Pages/Loading/Loading';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    FetchCast(movieId)\n      .then(data => setCast(data.cast))\n      .catch(error => console.log(error));\n  }, [movieId]);\n  //   console.log('array from Cast.jsx', cast);\n\n  return (\n    <>\n      <Suspense fallback={<Loading />}>\n        <RenderCastList>\n          <RenderCast cast={cast} />\n        </RenderCastList>\n      </Suspense>\n    </>\n  );\n};\n\nexport default Cast;\n","import { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { FetchMovieDetails } from 'Pages/API/API';\nimport './MovieDetails.css';\nimport { Loading } from 'Pages/Loading/Loading';\n\nexport const getPosterUrl = posterPath => {\n  if (String(posterPath).includes('https:')) {\n    return posterPath.slice(1);\n  } else {\n    return `https://www.themoviedb.org/t/p/w220_and_h330_face${posterPath}`;\n  }\n};\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [currentMovie, setCurrentMovie] = useState({});\n  // const [castButtonActive, setCastButtonActive] = useState(true);\n  // const [reviewsButtonActive, setreviewsButtonActive] = useState(true);\n\n  const poster = getPosterUrl(currentMovie.poster_path);\n\n  useEffect(() => {\n    FetchMovieDetails(movieId)\n      .then(data => setCurrentMovie(data))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <Suspense fallback={<Loading />}>\n        <div className=\"movie-container\">\n          <img src={poster} alt=\"poster\" className=\"poster\" />\n          <div className=\"text-container\">\n            <p className=\"film-title \">\n              {currentMovie.title}\n              <span> ({String(currentMovie.release_date).slice(0, 4)})</span>\n            </p>\n            <p className=\"film-bold\">Popularity</p>\n            <span className=\"popularity\">{currentMovie.popularity}</span>\n            <p className=\"film-bold overview\">Overview</p>\n            <p className=\"overview-desc\">{currentMovie.overview}</p>\n            {/* <p>Genres: {genres}</p> */}\n            <h4>Additional information</h4>\n            <ul>\n              <li>\n                <Link to={`cast`}>Cast</Link>\n              </li>\n              <li>\n                <Link to={`reviews`}>Reviews</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","URL","FetchTrending","axios","response","data","results","FetchMovieDetails","id","FetchByName","name","FetchCast","FetchReviews","Loading","RenderCast","cast","console","log","length","map","actor","profile_path","className","src","getPosterUrl","alt","character","RenderCastList","children","useState","setCast","movieId","useParams","useEffect","then","catch","error","Suspense","fallback","posterPath","String","includes","slice","currentMovie","setCurrentMovie","poster","poster_path","title","release_date","popularity","overview","to"],"sourceRoot":""}